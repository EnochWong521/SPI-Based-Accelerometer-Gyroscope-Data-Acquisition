
Lab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000053a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000005ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00802000  00802000  000005ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004d6c  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003f2a  00000000  00000000  0000545c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a4b  00000000  00000000  00009386  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000022c  00000000  00000000  00009dd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000034e4  00000000  00000000  0000a000  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003d6  00000000  00000000  0000d4e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  0000d8ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
   8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
   c:	0c 94 9c 01 	jmp	0x338	; 0x338 <__vector_3>
  10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  28:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  2c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  30:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  34:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  40:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  5c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  8c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  90:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  94:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  98:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  9c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  fc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 100:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 104:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 108:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 10c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 110:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 114:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 118:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 11c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 120:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 124:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 128:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 12c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 130:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 134:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 138:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 13c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 140:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 144:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 148:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 14c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 150:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 154:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 158:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 15c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 160:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 164:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 168:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 16c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 170:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 174:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 178:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 17c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 180:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 184:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 188:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 18c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 190:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 194:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 198:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 19c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_clear_bss>:
 214:	20 e2       	ldi	r18, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
 21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
 21e:	a1 30       	cpi	r26, 0x01	; 1
 220:	b2 07       	cpc	r27, r18
 222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
 224:	0e 94 d6 01 	call	0x3ac	; 0x3ac <main>
 228:	0c 94 9b 02 	jmp	0x536	; 0x536 <_exit>

0000022c <__bad_interrupt>:
 22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <usartd0_init>:
{
  /* intentionally left blank */
}

void usartd0_init(void)
{
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	cd b7       	in	r28, 0x3d	; 61
 236:	de b7       	in	r29, 0x3e	; 62
  /* Configure relevant TxD and RxD pins. */
	PORTD.OUTSET = PIN3_bm;
 238:	80 e6       	ldi	r24, 0x60	; 96
 23a:	96 e0       	ldi	r25, 0x06	; 6
 23c:	28 e0       	ldi	r18, 0x08	; 8
 23e:	fc 01       	movw	r30, r24
 240:	25 83       	std	Z+5, r18	; 0x05
	PORTD.DIRSET = PIN3_bm;
 242:	80 e6       	ldi	r24, 0x60	; 96
 244:	96 e0       	ldi	r25, 0x06	; 6
 246:	28 e0       	ldi	r18, 0x08	; 8
 248:	fc 01       	movw	r30, r24
 24a:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRCLR = PIN2_bm;
 24c:	80 e6       	ldi	r24, 0x60	; 96
 24e:	96 e0       	ldi	r25, 0x06	; 6
 250:	24 e0       	ldi	r18, 0x04	; 4
 252:	fc 01       	movw	r30, r24
 254:	22 83       	std	Z+2, r18	; 0x02

  /* Configure baud rate. */
	USARTD0.BAUDCTRLA = (uint8_t)BSEL;
 256:	80 ea       	ldi	r24, 0xA0	; 160
 258:	99 e0       	ldi	r25, 0x09	; 9
 25a:	25 e0       	ldi	r18, 0x05	; 5
 25c:	fc 01       	movw	r30, r24
 25e:	26 83       	std	Z+6, r18	; 0x06
	USARTD0.BAUDCTRLB = (uint8_t)((BSCALE << 4)|(BSEL >> 8));
 260:	80 ea       	ldi	r24, 0xA0	; 160
 262:	99 e0       	ldi	r25, 0x09	; 9
 264:	20 ea       	ldi	r18, 0xA0	; 160
 266:	fc 01       	movw	r30, r24
 268:	27 83       	std	Z+7, r18	; 0x07

  /* Configure remainder of serial protocol. */
  /* (In this example, a protocol with 8 data bits, no parity, and
   *  one stop bit is chosen.) */
	USARTD0.CTRLC =	(USART_CMODE_ASYNCHRONOUS_gc |
 26a:	80 ea       	ldi	r24, 0xA0	; 160
 26c:	99 e0       	ldi	r25, 0x09	; 9
 26e:	23 e0       	ldi	r18, 0x03	; 3
 270:	fc 01       	movw	r30, r24
 272:	25 83       	std	Z+5, r18	; 0x05
					 USART_PMODE_DISABLED_gc  	 |
					 USART_CHSIZE_8BIT_gc)       &
					~USART_SBMODE_bm;

  /* Enable receiver and/or transmitter systems. */
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
 274:	80 ea       	ldi	r24, 0xA0	; 160
 276:	99 e0       	ldi	r25, 0x09	; 9
 278:	28 e1       	ldi	r18, 0x18	; 24
 27a:	fc 01       	movw	r30, r24
 27c:	24 83       	std	Z+4, r18	; 0x04

  /* Enable interrupt (optional). */
	/* USARTD0.CTRLA = USART_RXCINTLVL_MED_gc; */
}
 27e:	00 00       	nop
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	08 95       	ret

00000286 <usartd0_out_char>:

void usartd0_out_char(char c)
{
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	1f 92       	push	r1
 28c:	cd b7       	in	r28, 0x3d	; 61
 28e:	de b7       	in	r29, 0x3e	; 62
 290:	89 83       	std	Y+1, r24	; 0x01
	while(!(USARTD0.STATUS & USART_DREIF_bm));
 292:	00 00       	nop
 294:	80 ea       	ldi	r24, 0xA0	; 160
 296:	99 e0       	ldi	r25, 0x09	; 9
 298:	fc 01       	movw	r30, r24
 29a:	81 81       	ldd	r24, Z+1	; 0x01
 29c:	88 2f       	mov	r24, r24
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	80 72       	andi	r24, 0x20	; 32
 2a2:	99 27       	eor	r25, r25
 2a4:	89 2b       	or	r24, r25
 2a6:	b1 f3       	breq	.-20     	; 0x294 <usartd0_out_char+0xe>
	USARTD0.DATA = c;
 2a8:	80 ea       	ldi	r24, 0xA0	; 160
 2aa:	99 e0       	ldi	r25, 0x09	; 9
 2ac:	29 81       	ldd	r18, Y+1	; 0x01
 2ae:	fc 01       	movw	r30, r24
 2b0:	20 83       	st	Z, r18
}
 2b2:	00 00       	nop
 2b4:	0f 90       	pop	r0
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	08 95       	ret

000002bc <LSM_init>:
#include "lsm6dsl_registers.h"
#include "usart.h"

volatile uint8_t accel_flag = 0;

void LSM_init(void){
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
 2c0:	cd b7       	in	r28, 0x3d	; 61
 2c2:	de b7       	in	r29, 0x3e	; 62
	// IMU software reset
	LSM_write(CTRL3_C, 0b00000001);
 2c4:	61 e0       	ldi	r22, 0x01	; 1
 2c6:	82 e1       	ldi	r24, 0x12	; 18
 2c8:	0e 94 5f 02 	call	0x4be	; 0x4be <LSM_write>
	
	// set IMU interrupt activation level as active low and enable address incrementation during multiple byte access
	LSM_write(CTRL3_C, 0b00100100);
 2cc:	64 e2       	ldi	r22, 0x24	; 36
 2ce:	82 e1       	ldi	r24, 0x12	; 18
 2d0:	0e 94 5f 02 	call	0x4be	; 0x4be <LSM_write>
	
	// enable data in XYZ axis
	LSM_write(CTRL9_XL, 0b11100000);
 2d4:	60 ee       	ldi	r22, 0xE0	; 224
 2d6:	88 e1       	ldi	r24, 0x18	; 24
 2d8:	0e 94 5f 02 	call	0x4be	; 0x4be <LSM_write>
	
	// set output data rate as 208Hz, full scale selection as 2g
	LSM_write(CTRL1_XL, 0b01010000);
 2dc:	60 e5       	ldi	r22, 0x50	; 80
 2de:	80 e1       	ldi	r24, 0x10	; 16
 2e0:	0e 94 5f 02 	call	0x4be	; 0x4be <LSM_write>
	
	// make accelerometer data ready on INT1
	LSM_write(INT1_CTRL, 0b00000001);
 2e4:	61 e0       	ldi	r22, 0x01	; 1
 2e6:	8d e0       	ldi	r24, 0x0D	; 13
 2e8:	0e 94 5f 02 	call	0x4be	; 0x4be <LSM_write>
}
 2ec:	00 00       	nop
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <ISR_init>:

void ISR_init(void){
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
 2f8:	cd b7       	in	r28, 0x3d	; 61
 2fa:	de b7       	in	r29, 0x3e	; 62
	// set PC6 as input
	PORTC.DIRCLR = PIN6_bm;
 2fc:	80 e4       	ldi	r24, 0x40	; 64
 2fe:	96 e0       	ldi	r25, 0x06	; 6
 300:	20 e4       	ldi	r18, 0x40	; 64
 302:	fc 01       	movw	r30, r24
 304:	22 83       	std	Z+2, r18	; 0x02
	// initialize IO interrupt signals
	PORTC.INT1MASK = PIN6_bm;
 306:	80 e4       	ldi	r24, 0x40	; 64
 308:	96 e0       	ldi	r25, 0x06	; 6
 30a:	20 e4       	ldi	r18, 0x40	; 64
 30c:	fc 01       	movw	r30, r24
 30e:	23 87       	std	Z+11, r18	; 0x0b
	// set external interrupt PC6 as a low level interrupt
	PORTC.PIN6CTRL = PORT_ISC_FALLING_gc | PORT_OPC_TOTEM_gc;
 310:	80 e4       	ldi	r24, 0x40	; 64
 312:	96 e0       	ldi	r25, 0x06	; 6
 314:	22 e0       	ldi	r18, 0x02	; 2
 316:	fc 01       	movw	r30, r24
 318:	26 8b       	std	Z+22, r18	; 0x16
	PORTC.INTCTRL = PORT_INT1LVL_LO_gc;
 31a:	80 e4       	ldi	r24, 0x40	; 64
 31c:	96 e0       	ldi	r25, 0x06	; 6
 31e:	24 e0       	ldi	r18, 0x04	; 4
 320:	fc 01       	movw	r30, r24
 322:	21 87       	std	Z+9, r18	; 0x09
	// enable low level interrupts
	PMIC_CTRL = PMIC_LOLVLEX_bm;
 324:	82 ea       	ldi	r24, 0xA2	; 162
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	21 e0       	ldi	r18, 0x01	; 1
 32a:	fc 01       	movw	r30, r24
 32c:	20 83       	st	Z, r18
	// enable global interrupt
	sei();
 32e:	78 94       	sei
}
 330:	00 00       	nop
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	08 95       	ret

00000338 <__vector_3>:

ISR(PORTC_INT1_vect){
 338:	1f 92       	push	r1
 33a:	0f 92       	push	r0
 33c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
 340:	0f 92       	push	r0
 342:	11 24       	eor	r1, r1
 344:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 348:	0f 92       	push	r0
 34a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 34e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 352:	0f 92       	push	r0
 354:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 358:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 35c:	0f 92       	push	r0
 35e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 362:	8f 93       	push	r24
 364:	9f 93       	push	r25
 366:	ef 93       	push	r30
 368:	ff 93       	push	r31
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	cd b7       	in	r28, 0x3d	; 61
 370:	de b7       	in	r29, 0x3e	; 62
	// disable interrupt
	PORTC.INTCTRL = 0;
 372:	80 e4       	ldi	r24, 0x40	; 64
 374:	96 e0       	ldi	r25, 0x06	; 6
 376:	fc 01       	movw	r30, r24
 378:	11 86       	std	Z+9, r1	; 0x09
	// set acceleration global flag to 1
	accel_flag = 1;
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
}
 380:	00 00       	nop
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	ff 91       	pop	r31
 388:	ef 91       	pop	r30
 38a:	9f 91       	pop	r25
 38c:	8f 91       	pop	r24
 38e:	0f 90       	pop	r0
 390:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 394:	0f 90       	pop	r0
 396:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 39a:	0f 90       	pop	r0
 39c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 3a0:	0f 90       	pop	r0
 3a2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
 3a6:	0f 90       	pop	r0
 3a8:	1f 90       	pop	r1
 3aa:	18 95       	reti

000003ac <main>:

int main(void) {
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	cd b7       	in	r28, 0x3d	; 61
 3b2:	de b7       	in	r29, 0x3e	; 62
	// initializations
	ISR_init();
 3b4:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <ISR_init>
	spi_init();
 3b8:	0e 94 15 02 	call	0x42a	; 0x42a <spi_init>
	LSM_init();
 3bc:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LSM_init>
	usartd0_init();
 3c0:	0e 94 18 01 	call	0x230	; 0x230 <usartd0_init>
	
	// wake up the IMU by reading the XYZ registers
	LSM_read(OUTX_L_XL);
 3c4:	88 e2       	ldi	r24, 0x28	; 40
 3c6:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LSM_read>
	LSM_read(OUTY_L_XL);
 3ca:	8a e2       	ldi	r24, 0x2A	; 42
 3cc:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LSM_read>
	LSM_read(OUTZ_L_XL);
 3d0:	8c e2       	ldi	r24, 0x2C	; 44
 3d2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LSM_read>
	
	while(1){
		if(accel_flag){
 3d6:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 3da:	88 23       	and	r24, r24
 3dc:	e1 f3       	breq	.-8      	; 0x3d6 <main+0x2a>
			// transmit data via uart
			usartd0_out_char(LSM_read(OUTX_L_XL));
 3de:	88 e2       	ldi	r24, 0x28	; 40
 3e0:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LSM_read>
 3e4:	0e 94 43 01 	call	0x286	; 0x286 <usartd0_out_char>
			usartd0_out_char(LSM_read(OUTX_H_XL));
 3e8:	89 e2       	ldi	r24, 0x29	; 41
 3ea:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LSM_read>
 3ee:	0e 94 43 01 	call	0x286	; 0x286 <usartd0_out_char>
			usartd0_out_char(LSM_read(OUTY_L_XL));
 3f2:	8a e2       	ldi	r24, 0x2A	; 42
 3f4:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LSM_read>
 3f8:	0e 94 43 01 	call	0x286	; 0x286 <usartd0_out_char>
			usartd0_out_char(LSM_read(OUTY_H_XL));
 3fc:	8b e2       	ldi	r24, 0x2B	; 43
 3fe:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LSM_read>
 402:	0e 94 43 01 	call	0x286	; 0x286 <usartd0_out_char>
			usartd0_out_char(LSM_read(OUTZ_L_XL));
 406:	8c e2       	ldi	r24, 0x2C	; 44
 408:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LSM_read>
 40c:	0e 94 43 01 	call	0x286	; 0x286 <usartd0_out_char>
			usartd0_out_char(LSM_read(OUTZ_H_XL));
 410:	8d e2       	ldi	r24, 0x2D	; 45
 412:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LSM_read>
 416:	0e 94 43 01 	call	0x286	; 0x286 <usartd0_out_char>
			// reset acceleration flag
			accel_flag = 0;
 41a:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__DATA_REGION_ORIGIN__>
			// re-enable interrupt once read is complete
			PORTC.INTCTRL = PORT_INT1LVL_LO_gc;
 41e:	80 e4       	ldi	r24, 0x40	; 64
 420:	96 e0       	ldi	r25, 0x06	; 6
 422:	24 e0       	ldi	r18, 0x04	; 4
 424:	fc 01       	movw	r30, r24
 426:	21 87       	std	Z+9, r18	; 0x09
		}
	}
 428:	d6 cf       	rjmp	.-84     	; 0x3d6 <main+0x2a>

0000042a <spi_init>:

/*****************************FUNCTION DEFINITIONS*****************************/


void spi_init(void)
{
 42a:	cf 93       	push	r28
 42c:	df 93       	push	r29
 42e:	cd b7       	in	r28, 0x3d	; 61
 430:	de b7       	in	r29, 0x3e	; 62
	
  /* Initialize the relevant SPI output signals to be in an "idle" state.
   * Refer to the relevant timing diagram within the LSM6DSL datasheet.
   * (You may wish to utilize the macros defined in `spi.h`.) */
  PORTF.OUTSET = SCK_bm | SS_bm;
 432:	80 ea       	ldi	r24, 0xA0	; 160
 434:	96 e0       	ldi	r25, 0x06	; 6
 436:	20 e9       	ldi	r18, 0x90	; 144
 438:	fc 01       	movw	r30, r24
 43a:	25 83       	std	Z+5, r18	; 0x05

  /* Configure the pin direction of relevant SPI signals (SCK, MISO, MOSI, /SS). */
  PORTF.DIRSET = SCK_bm | MOSI_bm | SS_bm;
 43c:	80 ea       	ldi	r24, 0xA0	; 160
 43e:	96 e0       	ldi	r25, 0x06	; 6
 440:	20 eb       	ldi	r18, 0xB0	; 176
 442:	fc 01       	movw	r30, r24
 444:	21 83       	std	Z+1, r18	; 0x01
  PORTF.DIRCLR = MISO_bm;
 446:	80 ea       	ldi	r24, 0xA0	; 160
 448:	96 e0       	ldi	r25, 0x06	; 6
 44a:	20 e4       	ldi	r18, 0x40	; 64
 44c:	fc 01       	movw	r30, r24
 44e:	22 83       	std	Z+2, r18	; 0x02
	
  /* Set the other relevant SPI configurations. */
  SPIF.CTRL	=	SPI_PRESCALER_DIV4_gc |
 450:	80 ec       	ldi	r24, 0xC0	; 192
 452:	9b e0       	ldi	r25, 0x0B	; 11
 454:	2c e5       	ldi	r18, 0x5C	; 92
 456:	fc 01       	movw	r30, r24
 458:	20 83       	st	Z, r18
				SPI_MASTER_bm |
				SPI_MODE_3_gc |
				SPI_ENABLE_bm;
}
 45a:	00 00       	nop
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	08 95       	ret

00000462 <spi_write>:

void spi_write(uint8_t data)
{
 462:	cf 93       	push	r28
 464:	df 93       	push	r29
 466:	1f 92       	push	r1
 468:	cd b7       	in	r28, 0x3d	; 61
 46a:	de b7       	in	r29, 0x3e	; 62
 46c:	89 83       	std	Y+1, r24	; 0x01
	/* Write to the relevant DATA register. */
	SPIF.DATA = data;
 46e:	80 ec       	ldi	r24, 0xC0	; 192
 470:	9b e0       	ldi	r25, 0x0B	; 11
 472:	29 81       	ldd	r18, Y+1	; 0x01
 474:	fc 01       	movw	r30, r24
 476:	23 83       	std	Z+3, r18	; 0x03

	/* Wait for relevant transfer to complete. */
	while(!(SPIF.STATUS & SPI_IF_bm));
 478:	00 00       	nop
 47a:	80 ec       	ldi	r24, 0xC0	; 192
 47c:	9b e0       	ldi	r25, 0x0B	; 11
 47e:	fc 01       	movw	r30, r24
 480:	82 81       	ldd	r24, Z+2	; 0x02
 482:	88 23       	and	r24, r24
 484:	d4 f7       	brge	.-12     	; 0x47a <spi_write+0x18>
   * ATxmega128A1U, it would probably make more sense to have some single 
   * function, say `spi_transceive`, that both writes and reads 
   * data, rather than have two functions `spi_write` and `spi_read`,
   * but we will not concern ourselves with this possibility
   * during this semester of the course. */
}
 486:	00 00       	nop
 488:	0f 90       	pop	r0
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	08 95       	ret

00000490 <spi_read>:

uint8_t spi_read(void)
{
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
 494:	cd b7       	in	r28, 0x3d	; 61
 496:	de b7       	in	r29, 0x3e	; 62
  /* Write some arbitrary data to initiate a transfer. */
  SPIF.DATA = 0x37;
 498:	80 ec       	ldi	r24, 0xC0	; 192
 49a:	9b e0       	ldi	r25, 0x0B	; 11
 49c:	27 e3       	ldi	r18, 0x37	; 55
 49e:	fc 01       	movw	r30, r24
 4a0:	23 83       	std	Z+3, r18	; 0x03

  /* Wait for relevant transfer to be complete. */
  while(!(SPIF.STATUS & SPI_IF_bm));
 4a2:	00 00       	nop
 4a4:	80 ec       	ldi	r24, 0xC0	; 192
 4a6:	9b e0       	ldi	r25, 0x0B	; 11
 4a8:	fc 01       	movw	r30, r24
 4aa:	82 81       	ldd	r24, Z+2	; 0x02
 4ac:	88 23       	and	r24, r24
 4ae:	d4 f7       	brge	.-12     	; 0x4a4 <spi_read+0x14>

  /* After the transmission, return the data that was received. */
  return SPIF.DATA;
 4b0:	80 ec       	ldi	r24, 0xC0	; 192
 4b2:	9b e0       	ldi	r25, 0x0B	; 11
 4b4:	fc 01       	movw	r30, r24
 4b6:	83 81       	ldd	r24, Z+3	; 0x03
}
 4b8:	df 91       	pop	r29
 4ba:	cf 91       	pop	r28
 4bc:	08 95       	ret

000004be <LSM_write>:

/*****************************END OF DEPENDENCIES******************************/


/*****************************FUNCTION DEFINITIONS*****************************/
void LSM_write(uint8_t reg_addr, uint8_t data) {
 4be:	cf 93       	push	r28
 4c0:	df 93       	push	r29
 4c2:	1f 92       	push	r1
 4c4:	1f 92       	push	r1
 4c6:	cd b7       	in	r28, 0x3d	; 61
 4c8:	de b7       	in	r29, 0x3e	; 62
 4ca:	89 83       	std	Y+1, r24	; 0x01
 4cc:	6a 83       	std	Y+2, r22	; 0x02
	PORTF.OUTCLR = SS_bm;
 4ce:	80 ea       	ldi	r24, 0xA0	; 160
 4d0:	96 e0       	ldi	r25, 0x06	; 6
 4d2:	20 e1       	ldi	r18, 0x10	; 16
 4d4:	fc 01       	movw	r30, r24
 4d6:	26 83       	std	Z+6, r18	; 0x06
	spi_write(reg_addr | LSM6DSL_SPI_WRITE_STROBE_bm);
 4d8:	89 81       	ldd	r24, Y+1	; 0x01
 4da:	0e 94 31 02 	call	0x462	; 0x462 <spi_write>
	spi_write(data);
 4de:	8a 81       	ldd	r24, Y+2	; 0x02
 4e0:	0e 94 31 02 	call	0x462	; 0x462 <spi_write>
	PORTF.OUTSET = SS_bm;
 4e4:	80 ea       	ldi	r24, 0xA0	; 160
 4e6:	96 e0       	ldi	r25, 0x06	; 6
 4e8:	20 e1       	ldi	r18, 0x10	; 16
 4ea:	fc 01       	movw	r30, r24
 4ec:	25 83       	std	Z+5, r18	; 0x05
}
 4ee:	00 00       	nop
 4f0:	0f 90       	pop	r0
 4f2:	0f 90       	pop	r0
 4f4:	df 91       	pop	r29
 4f6:	cf 91       	pop	r28
 4f8:	08 95       	ret

000004fa <LSM_read>:

uint8_t LSM_read(uint8_t reg_addr) {
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
 4fe:	1f 92       	push	r1
 500:	1f 92       	push	r1
 502:	cd b7       	in	r28, 0x3d	; 61
 504:	de b7       	in	r29, 0x3e	; 62
 506:	8a 83       	std	Y+2, r24	; 0x02
	PORTF.OUTCLR = SS_bm;
 508:	80 ea       	ldi	r24, 0xA0	; 160
 50a:	96 e0       	ldi	r25, 0x06	; 6
 50c:	20 e1       	ldi	r18, 0x10	; 16
 50e:	fc 01       	movw	r30, r24
 510:	26 83       	std	Z+6, r18	; 0x06
	spi_write(reg_addr | LSM6DSL_SPI_READ_STROBE_bm);
 512:	8a 81       	ldd	r24, Y+2	; 0x02
 514:	80 68       	ori	r24, 0x80	; 128
 516:	0e 94 31 02 	call	0x462	; 0x462 <spi_write>
	uint8_t data = spi_read();
 51a:	0e 94 48 02 	call	0x490	; 0x490 <spi_read>
 51e:	89 83       	std	Y+1, r24	; 0x01
	PORTF.OUTSET = SS_bm;
 520:	80 ea       	ldi	r24, 0xA0	; 160
 522:	96 e0       	ldi	r25, 0x06	; 6
 524:	20 e1       	ldi	r18, 0x10	; 16
 526:	fc 01       	movw	r30, r24
 528:	25 83       	std	Z+5, r18	; 0x05
	return data;
 52a:	89 81       	ldd	r24, Y+1	; 0x01
}
 52c:	0f 90       	pop	r0
 52e:	0f 90       	pop	r0
 530:	df 91       	pop	r29
 532:	cf 91       	pop	r28
 534:	08 95       	ret

00000536 <_exit>:
 536:	f8 94       	cli

00000538 <__stop_program>:
 538:	ff cf       	rjmp	.-2      	; 0x538 <__stop_program>
